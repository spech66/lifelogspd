{{define "title"}}
    Weight
{{end}}
{{define "header"}}
{{end}}
{{define "body"}}
<div class="container text-center">
    <h1>Weight</h1>

    <canvas id="weightChartShort"></canvas>
    <canvas id="weightChartYear"></canvas>
    <canvas id="weightChartYearBmi"></canvas>
    <canvas id="weightChartAll"></canvas>

    <p>
        <a class="btn btn-secondary btn-lg" href="/weight" role="button"><i class="fas fa-arrow-circle-left fa-2x"></i><br />Back</a>
    </p>
</div>
{{end}}
{{define "scripts"}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/regression/1.4.0/regression.min.js"></script>
<script>
function Measurement(data) {
    this.date = data.date;
    this.weight = data.weight;
    this.height = data.height;
    this.bmi = (parseFloat(data.bmi).toFixed(1));
    this.bmioverweight = data.bmioverweight;
    this.bmiunderweight = data.bmiunderweight;
    this.height = data.height;
}

function generateChart(selDiv, chartTitle, chartColor, chartColor2, chartData, chartDataTrend = null) {
    var ctx = document.getElementById(selDiv).getContext('2d');

    datasets = [{
        label: chartTitle,
        borderColor: chartColor,
        backgroundColor: chartColor2,
        data: chartData
    }];
    if(chartDataTrend != null) {
        datasets.push({
            label: chartTitle + " Trend",
            borderColor: '#335d99',
            backgroundColor: '#00000000',
            data: chartDataTrend
        });
    }

    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets
        },
        options: {
            title: {
                text: chartTitle
            },
            scales: {
                xAxes: [{
                    type: 'time',
                    time: {
                        parser: 'YYYYMMDD HH:mm',
                        round: 'day',
                        tooltipFormat: 'DD.MM.YYYY HH:mm'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Date'
                    }
                }]
            },            
            elements: { 
                point: { 
                    radius: 0,
                    hitRadius: 10, 
                    hoverRadius: 5
                } 
            } 
        }
    });
}

function generateXYArray(data, maxRange, property) {
    return data.filter(dat => moment(dat.date).isAfter(maxRange)).map(sel => { return {
        x: sel.date,
        y: sel[property]
    }});
}

function generateTrend(data) {
    if(data.length < 2) {
        return null;
    }

    const arrayData = data.map(dat => [
        (new Date(dat.x)).getTime(),
        +dat.y
    ]);
    const result = regression('linear', arrayData);

    /*const gradient = result.equation[0];
    const yIntercept = result.equation[1];
    console.log(result);
    console.log(arrayData[0][0] * result.equation[0] + result.equation[1]);
    console.log(arrayData[arrayData.length-1][0] * result.equation[0] + result.equation[1]);*/

    const trend = [
        {
            x: data[0].x,
            y: [arrayData[0][0] * result.equation[0] + result.equation[1]]
        }, {
            x: data[arrayData.length-1].x,
            y: [arrayData[arrayData.length-1][0] * result.equation[0] + result.equation[1]]
        }
    ];
    return trend;
}

$(function () {
    $.getJSON("/api/weight", function(data) {
        data = data.sort((a, b) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0)); // Ascending!
        var mappedMeasurements = $.map(data, function(item) { return new Measurement(item) });

        var twoMonth = moment().startOf('day').subtract(2, 'months');
        const result2Month = generateXYArray(mappedMeasurements, twoMonth, "weight");
        const result2MonthTrend = generateTrend(result2Month);

        var oneYear = moment().startOf('day').subtract(1, 'year');
        const result1Year = generateXYArray(mappedMeasurements, oneYear, "weight");
        const result1YearTrend = generateTrend(result1Year);
        const result1YearBmi = generateXYArray(mappedMeasurements, oneYear, "bmi");

        const resultAll = mappedMeasurements.map(sel => { return {
                    x: sel.date,
                    y: sel.weight
                }});
        const resultAllTrend = generateTrend(resultAll);

        generateChart("weightChartShort", "2 Month", '#7EB26D', '#7EB26D88', result2Month, result2MonthTrend);
        generateChart("weightChartYear", "1 Year Weight", '#7EB26D', '#7EB26D88', result1Year, result1YearTrend);
        generateChart("weightChartYearBmi", "1 Year BMI", '#335d99','#335d9988', result1YearBmi);
        generateChart("weightChartAll", "All", '#7EB26D', '#7EB26D88', resultAll, resultAllTrend);
    });
});
</script>
{{end}}
