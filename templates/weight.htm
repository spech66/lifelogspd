{{define "title"}}
    Weight
{{end}}
{{define "body"}}
<div class="container-fluid text-center">
    <h1>LifelogSP - Weight</h1>

    <form data-bind="submit: addMeasurement">
        <div class="form-group">
            <label for="weightInput">Weight</label>
            <input name="weight" type="number" step="0.1" min="40" max="200" class="form-control form-control-lg" id="weightInput" placeholder="xxx.x in kg" data-bind="value: newMeasurementWeight" required>
        </div>
        <div class="form-group">
            <label for="heightInput">Height</label>
            <input name="height" type="number" step="0.1" min="40" max="200" class="form-control form-control-lg" id="heightInput" placeholder="xxx.x in cm" data-bind="value: newMeasurementHeight" required>
        </div>
        <button type="submit" class="btn btn-primary btn-lg"><i class="fas fa-plus-square fa-8x"></i><br />Submit</button>
    </form>

    <p>
        <a class="btn btn-secondary btn-lg" href="/" role="button"><i class="fas fa-arrow-circle-left fa-4x"></i><br />Back</a>
    </p>

    <ul data-bind="foreach: measurements, visible: measurements().length > 0">
        <li>
            <span data-bind="text: date"></span>
            <span data-bind="text: weight"></span>
            <span data-bind="text: height"></span>
            <a href="#" data-bind="click: $parent.removeMeasurement">Delete</a>
        </li> 
    </ul>
</div>
{{end}}
{{define "scripts"}}
<script>
function Measurement(data) {
    this.date = ko.observable(data.date);
    this.weight = ko.observable(data.weight);
    this.height = ko.observable(data.height);
}

function MeasurementListViewModel() {
    // Data
    var self = this;
    self.measurements = ko.observableArray([]);
    self.newMeasurementWeight = ko.observable("{{ .weight }}");
    self.newMeasurementHeight = ko.observable("{{ .height }}");

    // Operations
    self.addMeasurement = function() {
        self.measurements.push(new Measurement({ date: new Date(), weight: self.newMeasurementWeight(), height: self.newMeasurementHeight() }));
        self.newMeasurementWeight("");
        self.newMeasurementHeight(self.newMeasurementHeight());
    };
    self.removeMeasurement = function(measurement) {
        self.measurements.destroy(measurement);
    };
    /*self.save = function() {
        $.ajax("/api/weight", {
            data: ko.toJSON({ measurement: self.newMeasurement }),
            type: "post", contentType: "application/json",
            success: function(result) { alert(result) }
        });
    };*/

    // Load initial state from server, convert it to Measurement instances, then populate self.measurements
    $.getJSON("/api/weight", function(data) {
        var mappedMeasurements = $.map(data, function(item) { return new Measurement(item) });
        self.measurements(mappedMeasurements);
    });
}

$(function () {
    ko.applyBindings(new MeasurementListViewModel());
});
</script>
{{end}}
