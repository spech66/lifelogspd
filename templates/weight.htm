{{define "title"}}
    Weight
{{end}}
{{define "body"}}
<div class="container-fluid text-center">
    <h1>Weight</h1>

    <div class="alert alert-success" role="alert" data-bind="visible: successMessage().length > 0">
        Saved successfully.
    </div>
    <div class="alert alert-danger" role="alert" data-bind="visible: errorMessage().length > 0, text: errorMessage">
    </div>

    <form data-bind="submit: addMeasurement">
        <div class="form-group">
            <label for="weightInput">Weight</label>
            <input name="weight" type="number" step="0.1" min="40" max="200" class="form-control form-control-lg" id="weightInput" placeholder="xxx.x in kg" data-bind="value: newMeasurementWeight" required>
        </div>
        <div class="form-group">
            <label for="heightInput">Height</label>
            <input name="height" type="number" step="0.1" min="40" max="200" class="form-control form-control-lg" id="heightInput" placeholder="xxx.x in cm" data-bind="value: newMeasurementHeight" required>
        </div>
        <button type="submit" class="btn btn-primary btn-lg"><i class="fas fa-plus-square fa-8x"></i><br />Submit</button>
    </form>

    <p>
        <a class="btn btn-success btn-lg" href="/weightgraph" role="button"><i class="fas fa-chart-bar fa-4x"></i><br />Graph</a>
    </p>

    <p>
        <a class="btn btn-secondary btn-lg" href="/" role="button"><i class="fas fa-arrow-circle-left fa-4x"></i><br />Back</a>
    </p>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Weight</th>
                <th scope="col">Height</th>
                <th scope="col">BMI</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: measurements, visible: measurements().length > 0">
            <tr>
                <th scope="row"><span data-bind="text: date"></span></th>
                <td><span data-bind="text: weight"></span> kg</td>
                <td><span data-bind="text: height"></span> cm</td>
                <td><span data-bind="text: bmi"></span></td>
                <td><a href="#" data-bind="click: $parent.removeMeasurement"><i class="fas fa-trash fa-2x"></i></a></td>
            </tr>
        </tbody>
    </table>
</div>
{{end}}
{{define "scripts"}}
<script>
function Measurement(data) {
    this.date = ko.observable(data.date);
    this.weight = ko.observable(data.weight);
    this.height = ko.observable(data.height);
    this.bmi = ko.observable(parseFloat(data.bmi).toFixed(1));
}

function MeasurementListViewModel() {
    // Data
    var self = this;
    self.successMessage = ko.observable("");
    self.errorMessage = ko.observable("");
    self.measurements = ko.observableArray([]);
    self.newMeasurementWeight = ko.observable("{{ .weight }}");
    self.newMeasurementHeight = ko.observable("{{ .height }}");

    // Operations
    self.addMeasurement = function() {
        self.successMessage("");

        $.post("/api/weight", {
            date: new Date(), weight: self.newMeasurementWeight(), height: self.newMeasurementHeight()
        })
        .done(function(data) {
            self.successMessage(data.date);
            
            self.measurements.unshift(new Measurement(data));
            self.newMeasurementWeight("");
            self.newMeasurementHeight(data.height);
        })
        .fail(function (jqXHR, textStatus, error) {
            self.errorMessage("Post error: " + error);
        });
    };
    self.removeMeasurement = function(measurement) {
        $.ajax({
            url: '/api/weight/' + measurement.date(),
            type: 'DELETE',
        })
        .done(function(data) {
            self.measurements.destroy(measurement);
        })
        .fail(function (jqXHR, textStatus, error) {
            self.errorMessage("Delete error: " + error);
        });
    };

    // Load initial state from server, convert it to Measurement instances, then populate self.measurements
    $.getJSON("/api/weight", function(data) {
        data = data.sort((a, b) => (a.date > b.date) ? -1 : ((b.date > a.date) ? 1 : 0)); // Descending
        var mappedMeasurements = $.map(data, function(item) { return new Measurement(item) });
        self.measurements(mappedMeasurements);
    });
}

$(function () {
    ko.applyBindings(new MeasurementListViewModel());
});
</script>
{{end}}
